import os

def GridOptions(conditions, Mesher):
    f = open('grid_options.in', 'w')
    f.write('&SOPT \n')
    f.write('nsrf = ' + str(Mesher.PtsAirfoil) + ' \n')
    f.write('lesp = ' + str(Mesher.LESp) + ' \n')
    f.write('tesp = ' + str(Mesher.TESp) + ' \n')
    f.write('radi = ' + str(Mesher.Radius) + ' \n')
    f.write('nwke = ' + str(Mesher.CWakePoints) + ' \n')
    f.write('fdst = ' + str(Mesher.FDST) + ' \n')
    f.write('fwkl = ' + str(Mesher.FWKL) + ' \n')
    f.write('fwki = ' + str(Mesher.FWKI) + ' \n')
    f.write('/ \n')
    f.write('&VOPT \n')
    f.write('name = "' + conditions.airfoil + '" \n')
    f.write('jmax = ' + str(Mesher.PtsNormal) + ' \n')
    f.write('slvr = "' + Mesher.extrMethod + '" \n')
    f.write('topo = "' + Mesher.Grid + '" \n')
    f.write('ypls = ' + str(Mesher.YPlus) + ' \n')
    f.write('recd = ' + str(conditions.Re) + ' \n')
    f.write('cfrc = ' + str(Mesher.ChordFrac) + ' \n')
    f.write('stp1 = ' + str(Mesher.STP1) + ' \n')
    f.write('stp2 = ' + str(Mesher.STP2) + ' \n')
    f.write('nrmt = ' + str(Mesher.NRMT) + ' \n')
    f.write('nrmb = ' + str(Mesher.NRMB) + ' \n')
    f.write('alfa = ' + str(Mesher.ALFA) + ' \n')
    f.write('epsi = ' + str(Mesher.EPSI) + ' \n')
    f.write('epse = ' + str(Mesher.EPSE) + ' \n')
    f.write('funi = ' + str(Mesher.FUNI) + ' \n')
    f.write('asmt = ' + str(Mesher.ASMT) + ' \n')
    f.write('/ \n')
    f.write('&OOPT \n')
    f.write('gdim = ' + str(Mesher.GDIM) + ' \n')
    f.write('npln = ' + str(Mesher.NPLN) + ' \n')
    f.write('dpln = ' + str(Mesher.DPLN) + ' \n')
    f.write('f3dm = ' + Mesher.f3dm + '\n')
    f.write('/ \n')
    f.close()

    f = open('construct2dCommands.txt', 'w')
    f.write('grid \n')
    f.write('smth \n')
    f.write('quit \n')
    f.close()


def write_turbulence_properties(CFDSettings):
    f = open('turbulenceProperties', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   location    "constant"; \n')
    f.write('   object      turbulenceProperties; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('simulationType RAS; \n')
    f.write('\n')
    f.write('RAS \n')
    f.write('{ \n')
    f.write('   RASModel        ' + CFDSettings.Solver + '; \n')
    f.write('   turbulence      on; \n')
    f.write('\n')
    f.write('   printCoeffs     on; \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv turbulenceProperties constant')

def write_transport_properties(conditions):
    f = open('transportProperties', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   location    "constant"; \n')
    f.write('   object      transportProperties; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('transportModel Newtonian; \n')
    f.write('\n')
    f.write('rho 		[1 -3 0 0 0 0 0] ' + str(conditions.rho) + '; \n')
    f.write('nu         [0 2 -1 0 0 0 0] ' + str(conditions.mu/conditions.rho) + '; \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv transportProperties constant')


def write_p():
    f = open('p', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       volScalarField; \n')
    f.write('   location    "0"; \n')
    f.write('   object      p; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('dimensions      [0 2 -2 0 0 0 0]; \n')
    f.write(' \n')
    f.write('internalField   uniform 0; \n')
    f.write('\n')
    f.write('boundaryField \n')
    f.write('{ \n')
    f.write('   farfield \n')
    f.write('   { \n')
    f.write('       type                      freestreamPressure; \n')
    f.write('       freestreamValue           $internalField; \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   airfoil \n')
    f.write('   { \n')
    f.write('       type            zeroGradient; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv p 0')


def write_U(conditions):
    f = open('U', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       volVectorField; \n')
    f.write('   location    "0"; \n')
    f.write('   object      U; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('dimensions      [0 1 -1 0 0 0 0]; \n')
    f.write(' \n')
    f.write('internalField   uniform (' + str(conditions.vel * np.cos(np.deg2rad(conditions.aoa))) + ' ' + str(
        conditions.vel * np.sin(np.deg2rad(conditions.aoa))) + ' 0.0000); \n ')
    f.write(' \n')
    f.write('boundaryField \n')
    f.write('{ \n')
    f.write('   farfield \n')
    f.write('   { \n')
    f.write('       type            freestream; \n')
    f.write('       freestreamValue $internalField; \n')
    f.write('   } \n')
    f.write(' \n')
    f.write('   airfoil \n')
    f.write('   { \n')
    f.write('       type            fixedValue; \n')
    f.write('       value           uniform (0 0 0); \n')
    f.write('   } \n')
    f.write('} \n')
    f.write(' \n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv U 0')

def write_nut(CFDSettings, conditions):
    f = open('nut', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       volScalarField; \n')
    f.write('   location    "0"; \n')
    f.write('   object      nut; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('dimensions      [0 2 -1 0 0 0 0]; \n')
    f.write(' \n')
    f.write('internalField   uniform 0.000188; \n')
    f.write('\n')
    f.write('boundaryField \n')
    f.write('{ \n')
    f.write('   farfield \n')
    f.write('   { \n')
    f.write('       type            calculated; \n')
    f.write('       value           $internalField;  \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   airfoil \n')
    f.write('   { \n')
    if CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('       type            nutLowReWallFunction; \n')
        f.write('       value           uniform 0; \n')
    elif conditions.yPlus >= 30 and CFDSettings.Solver != 'kOmegaSSTLowRe':
        f.write('       type            nutUSpaldingWallFunction; \n')
        f.write('       value           uniform 0; \n')
    else:
        f.write('       type            fixedValue; \n')
        f.write('       value           uniform 0; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv nut 0')


def write_nuTilda():
    f = open('nuTilda', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       volScalarField; \n')
    f.write('   location    "0"; \n')
    f.write('   object      nuTilda; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('dimensions      [0 2 -1 0 0 0 0]; \n')
    f.write(' \n')
    f.write('internalField   uniform 0.000751; \n')
    f.write('\n')
    f.write('boundaryField \n')
    f.write('{ \n')
    f.write('   farfield \n')
    f.write('   { \n')
    f.write('       type                        freestream; \n')
    f.write('       freestreamValue             $internalField;  \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   airfoil \n')
    f.write('   { \n')
    f.write('       type            fixedValue; \n')
    f.write('       value           uniform 0; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv nuTilda 0')


def write_k(conditions):
    k = 3/2*(conditions.TurbulenceIntensity/100*conditions.vel)**2
    f = open('k', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       volScalarField; \n')
    f.write('   location    "0"; \n')
    f.write('   object      k; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('dimensions      [0 2 -2 0 0 0 0]; \n')
    f.write(' \n')
    f.write('internalField   uniform ' + str(k) + '; \n')
    f.write('\n')
    f.write('boundaryField \n')
    f.write('{ \n')
    f.write('   farfield \n')
    f.write('   { \n')
    f.write('       type                        freestream; \n')
    f.write('       freestreamValue             $internalField;  \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   airfoil \n')
    f.write('   { \n')
    if conditions.yPlus >= 30:
        f.write('       type            nutkWallFunction; \n')
        f.write('       value           uniform 0; \n')
    else:
        f.write('       type            fixedValue; \n')
        f.write('       value           uniform 0; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv k 0')


def write_kt(conditions):
    kt = 3/2*(conditions.TurbulenceIntensity/100*conditions.vel)**2
    f = open('kt', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       volScalarField; \n')
    f.write('   location    "0"; \n')
    f.write('   object      kt; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('dimensions      [0 2 -2 0 0 0 0]; \n')
    f.write(' \n')
    f.write('internalField   uniform ' + str(kt) + '; \n')
    f.write('\n')
    f.write('boundaryField \n')
    f.write('{ \n')
    f.write('   farfield \n')
    f.write('   { \n')
    f.write('       type                        freestream; \n')
    f.write('       freestreamValue             $internalField;  \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   airfoil \n')
    f.write('   { \n')
    f.write('       type            fixedValue; \n')
    f.write('       value           uniform 0; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv kt 0')


def write_kl():
    kl = 0
    f = open('kl', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       volScalarField; \n')
    f.write('   location    "0"; \n')
    f.write('   object      k; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('dimensions      [0 2 -2 0 0 0 0]; \n')
    f.write(' \n')
    f.write('internalField   uniform ' + str(kl) + '; \n')
    f.write('\n')
    f.write('boundaryField \n')
    f.write('{ \n')
    f.write('   farfield \n')
    f.write('   { \n')
    f.write('       type                        freestream; \n')
    f.write('       freestreamValue             $internalField;  \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   airfoil \n')
    f.write('   { \n')
    f.write('       type            fixedValue; \n')
    f.write('       value           uniform 0; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv kl 0')


def write_omega(conditions, CFDSettings):
    k = 3 / 2 * (conditions.TurbulenceIntensity / 100 * conditions.vel) ** 2
    C_mu = 0.09
    omega = math.sqrt(k)/C_mu**(0.25)/conditions.chord
    # omega = conditions.vel/40
    f = open('omega', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       volScalarField; \n')
    f.write('   location    "0"; \n')
    f.write('   object      omega; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('dimensions      [0 0 -1 0 0 0 0]; \n')
    f.write(' \n')
    f.write('internalField   uniform ' + str(omega) + '; \n')
    f.write('\n')
    f.write('boundaryField \n')
    f.write('{ \n')
    f.write('   farfield \n')
    f.write('   { \n')
    f.write('       type                        freestream; \n')
    f.write('       freestreamValue             $internalField;  \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   airfoil \n')
    f.write('   { \n')
    if CFDSettings.Solver == 'kOmegaSSTLowRe' or conditions.yPlus >= 30:
        f.write('       type            omegaWallFunction; \n')
        f.write('       value           uniform 1e-12; \n')
    else:
        f.write('       type            zeroGradient; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv omega 0')


def write_gammaInt():
    f = open('gammaInt', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       volScalarField; \n')
    f.write('   location    "0"; \n')
    f.write('   object      gammaInt; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('dimensions      [0 0 0 0 0 0 0]; \n')
    f.write(' \n')
    f.write('internalField   uniform 1; \n')
    f.write('\n')
    f.write('boundaryField \n')
    f.write('{ \n')
    f.write('   farfield \n')
    f.write('   { \n')
    f.write('       type                      freestreamPressure; \n')
    f.write('       freestreamValue           $internalField; \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   airfoil \n')
    f.write('   { \n')
    f.write('       type            zeroGradient; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv gammaInt 0')


def write_ReThetat(conditions):
    k = 3 / 2 * (conditions.TurbulenceIntensity / 100 * conditions.vel) ** 2
    Tu = 100 * math.sqrt(2 / 3 * k) / conditions.vel
    if Tu <= 1.3:
        reThetat = 1173.51 - 589.428 * Tu + 0.2196 / Tu ** 2
    elif Tu > 1.3:
        reThetat = 331.5 / (Tu - 0.5658) ** 0.671
    f = open('ReThetat', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       volScalarField; \n')
    f.write('   location    "0"; \n')
    f.write('   object      ReThetat; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('dimensions      [0 0 0 0 0 0 0]; \n')
    f.write(' \n')
    f.write('internalField   uniform ' + str(reThetat) + '; \n')
    f.write('\n')
    f.write('boundaryField \n')
    f.write('{ \n')
    f.write('   farfield \n')
    f.write('   { \n')
    f.write('       type                        freestream; \n')
    f.write('       freestreamValue             $internalField;  \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   airfoil \n')
    f.write('   { \n')
    f.write('       type            zeroGradient; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv ReThetat 0')


def write_controlDict(CFDSettings):
    f = open('controlDict', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   location    "system"; \n')
    f.write('   object      controlDict; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('application     simpleFoam;  \n')
    f.write('\n')
    f.write('startFrom       latestTime; \n')
    f.write('\n')
    f.write('startTime       0; \n')
    f.write('\n')
    f.write('stopAt          endTime; \n')
    f.write('\n')
    f.write('endTime         ' + str(CFDSettings.Iterations) + '; \n')
    f.write('\n')
    f.write('deltaT          1; \n')
    f.write('\n')
    f.write('writeControl    timeStep; \n')
    f.write('\n')
    f.write('writeInterval  	' + str(CFDSettings.writeIntervals) + '; \n')
    f.write('\n')
    f.write('purgeWrite      0; \n')
    f.write('\n')
    f.write('writeFormat     ascii;  \n')
    f.write('\n')
    f.write('writePrecision  6; \n')
    f.write('\n')
    f.write('writeCompression off; \n')
    f.write('\n')
    f.write('timeFormat      general; \n')
    f.write('\n')
    f.write('timePrecision   6; \n')
    f.write('\n')
    f.write('runTimeModifiable true; \n')
    f.write('\n')
    if CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('libs \n')
        f.write('( \n')
        f.write('   "libmyIncompressibleRASModels.so" \n')
        f.write('); \n')
    f.write('functions \n')
    f.write('{ \n')
    f.write('    #include "forceCoeffs" \n')
    f.write('}; \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv controlDict system')


def write_unsteady_controlDict(CFDSettings, iter):
    f = open('controlDict', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   location    "system"; \n')
    f.write('   object      controlDict; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('application     pimpleFoam;  \n')
    f.write('\n')
    f.write('startFrom       latestTime; \n')
    f.write('\n')
    f.write('startTime       0; \n')
    f.write('\n')
    f.write('stopAt          endTime; \n')
    f.write('\n')
    f.write('endTime         ' + str(iter+CFDSettings.UnsteadyTime) + '; \n')
    f.write('\n')
    f.write('deltaT          '+ str(CFDSettings.UnsteadyDeltaT) + '; \n')
    f.write('\n')
    f.write('writeControl    runTime; \n')
    f.write('\n')
    f.write('writeInterval  	' + CFDSettings.UnsteadyWriteInterval + '; \n')
    f.write('\n')
    f.write('purgeWrite      0; \n')
    f.write('\n')
    f.write('writeFormat     ascii;  \n')
    f.write('\n')
    f.write('writePrecision  16; \n')
    f.write('\n')
    f.write('writeCompression off; \n')
    f.write('\n')
    f.write('timeFormat      general; \n')
    f.write('\n')
    f.write('timePrecision   16; \n')
    f.write('\n')
    f.write('runTimeModifiable true; \n')
    f.write('maxCo              2; \n')
    f.write('maxDeltaT          1; \n')
    if CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('libs \n')
        f.write('( \n')
        f.write('   "libmyIncompressibleRASModels.so" \n')
        f.write('); \n')
    f.write('functions \n')
    f.write('{ \n')
    f.write('    #include "forceCoeffs" \n')
    f.write('    #include "fieldAverage" \n')
    f.write('}; \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv controlDict system')


def write_decomposeParDict(CFDSettings):
    f = open('decomposeParDict', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   location    "system"; \n')
    f.write('   object      decomposeParDict; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('numberOfSubdomains ' + str(CFDSettings.NumCores) + '; \n')
    f.write('\n')
    f.write('method          scotch; \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv decomposeParDict system')


def write_fvSchemes(CFDSettings):
    f = open('fvSchemes', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   location    "system"; \n')
    f.write('   object      fvSchemes; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('ddtSchemes \n')
    f.write('{ \n')
    f.write('   default steadyState;  \n')
    f.write('} \n')
    f.write('\n')
    f.write('gradSchemes \n')
    f.write('{ \n')
    f.write('   default         cellMDLimited Gauss linear 0.5; \n')
    f.write('   grad(U) 	    Gauss linear; \n')
    f.write('} \n')
    f.write('\n')
    f.write('divSchemes \n')
    f.write('{ \n')
    f.write('   default         none; \n')
    f.write('   div(phi,U)      bounded Gauss linearUpwind grad(U); \n')
    if CFDSettings.Solver == 'SpalartAllmaras':
        f.write('   div(phi,nuTilda) bounded Gauss upwind; \n')
    elif CFDSettings.Solver == 'kOmegaSST' or CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('   div(phi,k)      bounded Gauss upwind; \n')
        f.write('   div(phi,omega)  bounded Gauss upwind; \n')
    elif CFDSettings.Solver == 'kOmegaSSTLM':
        f.write('   div(phi,k)         bounded Gauss upwind; \n')
        f.write('   div(phi,omega)     bounded Gauss upwind; \n')
        f.write('   div(phi,ReThetat)  bounded Gauss upwind; \n')
        f.write('   div(phi,gammaInt)  bounded Gauss upwind; \n')
    elif CFDSettings.Solver == 'kkLOmega':
        f.write('   div(phi,kt)      bounded Gauss upwind; \n')
        f.write('   div(phi,kl)      bounded Gauss upwind; \n')
        f.write('   div(phi,omega)   bounded Gauss upwind; \n')
    f.write('   div((nuEff*dev2(T(grad(U))))) Gauss linear;  \n')
    f.write('} \n')
    f.write('\n')
    f.write('laplacianSchemes  \n')
    f.write('{ \n')
    f.write('   default         Gauss linear corrected; \n')
    # f.write('   default         Gauss linear limited 0.5; \n')
    f.write('} \n')
    f.write('\n')
    f.write('interpolationSchemes \n')
    f.write('{ \n')
    f.write('   default         linear; \n')
    f.write('} \n')
    f.write('\n')
    f.write('snGradSchemes  \n')
    f.write('{ \n')
    f.write('   default         corrected; \n')
    f.write('} \n')
    f.write('\n')
    f.write('wallDist \n')
    f.write('{ \n')
    f.write('   method meshWave; \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv fvSchemes system')


def write_unsteady_fvSchemes(CFDSettings):
    f = open('fvSchemes', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   location    "system"; \n')
    f.write('   object      fvSchemes; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('ddtSchemes \n')
    f.write('{ \n')
    f.write('   default backward;  \n')
    f.write('} \n')
    f.write('\n')
    f.write('gradSchemes \n')
    f.write('{ \n')
    if CFDSettings.Solver == 'SpalartAllmaras':
        f.write('   default         Gauss linear; \n')
    elif CFDSettings.Solver == 'kOmegaSST' or CFDSettings.Solver == 'kOmegaSSTLM' or CFDSettings.Solver == 'kkLOmega' or CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('   default         cellMDLimited Gauss linear 0.5; \n')
        f.write('   grad(U) 	    cellLimited Gauss linear 1; \n')
    f.write('} \n')
    f.write('\n')
    f.write('divSchemes \n')
    f.write('{ \n')
    f.write('   default         none; \n')
    f.write('   div(phi,U)      bounded Gauss linearUpwind grad(U); \n')
    if CFDSettings.Solver == 'SpalartAllmaras':
        f.write('   div(phi,nuTilda) bounded Gauss upwind; \n')
    elif CFDSettings.Solver == 'kOmegaSST' or CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('   div(phi,k)      bounded Gauss upwind; \n')
        f.write('   div(phi,omega)  bounded Gauss upwind; \n')
    elif CFDSettings.Solver == 'kOmegaSSTLM':
        f.write('   div(phi,k)         bounded Gauss upwind; \n')
        f.write('   div(phi,omega)     bounded Gauss upwind; \n')
        f.write('   div(phi,ReThetat)  bounded Gauss upwind; \n')
        f.write('   div(phi,gammaInt)  bounded Gauss upwind; \n')
    elif CFDSettings.Solver == 'kkLOmega':
        f.write('   div(phi,kt)      bounded Gauss upwind; \n')
        f.write('   div(phi,kl)      bounded Gauss upwind; \n')
        f.write('   div(phi,omega)   bounded Gauss upwind; \n')
    f.write('   div((nuEff*dev2(T(grad(U))))) Gauss linear;  \n')
    f.write('} \n')
    f.write('\n')
    f.write('laplacianSchemes  \n')
    f.write('{ \n')
    f.write('   default         Gauss linear corrected; \n')
    f.write('} \n')
    f.write('\n')
    f.write('interpolationSchemes \n')
    f.write('{ \n')
    f.write('   default         linear; \n')
    f.write('} \n')
    f.write('\n')
    f.write('snGradSchemes  \n')
    f.write('{ \n')
    f.write('   default         corrected; \n')
    f.write('} \n')
    f.write('\n')
    f.write('wallDist \n')
    f.write('{ \n')
    f.write('   method meshWave; \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv fvSchemes system')


def write_fvSolution(CFDSettings):
    f = open('fvSolution', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   location    "system"; \n')
    f.write('   object      fvSolution; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('solvers \n')
    f.write('{ \n')
    f.write('   p \n')
    f.write('   { \n')
    f.write('       solver                  GAMG;  \n')
    f.write('       tolerance               ' + CFDSettings.ToleranceP + '; \n')
    f.write('       relTol                  ' + CFDSettings.relTolP + '; \n')
    f.write('       smoother                GaussSeidel; \n')
    f.write('       nPreSweeps              0; \n')
    f.write('       nPostSweeps             2; \n')
    f.write('       cacheAgglomeration      on; \n')
    f.write('       agglomerator            faceAreaPair; \n')
    f.write('       nCellsInCoarsestLevel   120; \n')
    f.write('       mergeLevels             1; \n')
    f.write('       maxIter                 500; \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   U \n')
    f.write('   { \n')
    f.write('       solver          smoothSolver;  \n')
    f.write('       smoother	    GaussSeidel; \n')
    f.write('       tolerance        ' + CFDSettings.Tolerance + '; \n')
    f.write('       relTol           ' + CFDSettings.relTol + '; \n')
    f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
    f.write('   } \n')
    if CFDSettings.Solver == 'SpalartAllmaras':
        f.write('   nuTilda \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
    elif CFDSettings.Solver == 'kOmegaSST' or CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('   k \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   omega \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
    elif CFDSettings.Solver == 'kOmegaSSTLM':
        f.write('   k \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   omega \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   gammaInt \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   ReThetat \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
    elif CFDSettings.Solver == 'kkLOmega':
        f.write('   kt \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   kl \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   omega \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('SIMPLE \n')
    f.write('{ \n')
    f.write('   nNonOrthogonalCorrectors ' + CFDSettings.nNonOrthogonalCorrectors + '; \n')
    f.write('   pRefCell        ' + CFDSettings.pRefCell + '; \n')
    f.write('   pRefValue       ' + CFDSettings.pRefValue + '; \n')
    f.write('   nCorrectors     ' + CFDSettings.nCorrectors + '; \n')
    f.write('   consistent      true; \n')
    f.write('\n')
    f.write('   residualControl \n')
    f.write('   { \n')
    f.write('       p               ' + CFDSettings.residualControl + '; \n')
    f.write('       U               ' + CFDSettings.residualControl + '; \n')
    if CFDSettings.Solver == 'SpalartAllmaras':
        f.write('       nuTilda               ' + CFDSettings.residualControl + '; \n')
    elif CFDSettings.Solver == 'kOmegaSST' or CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('     "(k|omega)"                 ' + CFDSettings.residualControl + '; \n')
    elif CFDSettings.Solver == 'kOmegaSSTLM':
        f.write('     "(k|omega|gammaInt|ReThetat)"                 ' + CFDSettings.residualControl + '; \n')
    elif CFDSettings.Solver == 'kkLOmega':
        f.write('     "(kt|kl|omega)"                 ' + CFDSettings.residualControl + '; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('relaxationFactors \n')
    f.write('{ \n')
    f.write('   fields \n')
    f.write('   { \n')
    f.write('       "(p)"           ' + CFDSettings.relaxationFactorsP + '; \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   equations \n')
    f.write('   { \n')
    if CFDSettings.Solver == 'SpalartAllmaras':
        f.write('       "(U|nuTilda)"           ' + CFDSettings.relaxationFactors + '; \n')
    elif CFDSettings.Solver == 'kOmegaSST' or CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('       "(U|k|omega)"           ' + CFDSettings.relaxationFactors + '; \n')
    elif CFDSettings.Solver == 'kOmegaSSTLM':
        f.write('       "(U|k|omega|gammaInt|ReThetat)"           ' + CFDSettings.relaxationFactors + '; \n')
    elif CFDSettings.Solver == 'kkLOmega':
        f.write('       "(U|kt|kl|omega)"           ' + CFDSettings.relaxationFactors + '; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv fvSolution system')


def write_unsteady_fvSolution(CFDSettings):
    f = open('fvSolution', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   location    "system"; \n')
    f.write('   object      fvSolution; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('solvers \n')
    f.write('{ \n')
    f.write('   p \n')
    f.write('   { \n')
    f.write('       solver                  GAMG;  \n')
    f.write('       tolerance               ' + CFDSettings.ToleranceP + '; \n')
    f.write('       relTol                  ' + CFDSettings.relTolP + '; \n')
    f.write('       smoother                GaussSeidel; \n')
    f.write('       nPreSweeps              0; \n')
    f.write('       nPostSweeps             2; \n')
    f.write('       cacheAgglomeration      on; \n')
    f.write('       agglomerator            faceAreaPair; \n')
    f.write('       nCellsInCoarsestLevel   120; \n')
    f.write('       mergeLevels             1; \n')
    f.write('       maxIter                 500; \n')
    f.write('   } \n')
    f.write('   pFinal \n')
    f.write('   { \n')
    f.write('       $p; \n')
    f.write('       relTol         0; \n')
    f.write('   } \n \n')
    f.write('\n')
    f.write('   U \n')
    f.write('   { \n')
    f.write('       solver          smoothSolver;  \n')
    f.write('       smoother	    GaussSeidel; \n')
    f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
    f.write('       relTol           ' + CFDSettings.relTol + '; \n')
    f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
    f.write('   } \n')
    f.write('   UFinal \n')
    f.write('   { \n')
    f.write('       $U; \n')
    f.write('       relTol         0; \n')
    f.write('   } \n \n')
    if CFDSettings.Solver == 'SpalartAllmaras':
        f.write('   nuTilda \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   nuTildaFinal \n')
        f.write('   { \n')
        f.write('       $nuTilda; \n')
        f.write('       relTol         0; \n')
        f.write('   } \n \n')
    elif CFDSettings.Solver == 'kOmegaSST' or CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('   k \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   kFinal \n')
        f.write('   { \n')
        f.write('       $k; \n')
        f.write('       relTol         0; \n')
        f.write('   } \n \n')
        f.write('   omega \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   omegaFinal \n')
        f.write('   { \n')
        f.write('       $omega; \n')
        f.write('       relTol         0; \n')
        f.write('   } \n \n')
    elif CFDSettings.Solver == 'kOmegaSSTLM':
        f.write('   k \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   kFinal \n')
        f.write('   { \n')
        f.write('       $k; \n')
        f.write('       relTol         0; \n')
        f.write('   } \n \n')
        f.write('   omega \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   omegaFinal \n')
        f.write('   { \n')
        f.write('       $omega; \n')
        f.write('       relTol         0; \n')
        f.write('   } \n \n')
        f.write('   gammaInt \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   gammaIntFinal \n')
        f.write('   { \n')
        f.write('       $gammaInt; \n')
        f.write('       relTol         0; \n')
        f.write('   } \n \n')
        f.write('   ReThetat \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   ReThetatFinal \n')
        f.write('   { \n')
        f.write('       $ReThetat; \n')
        f.write('       relTol         0; \n')
        f.write('   } \n \n')
    elif CFDSettings.Solver == 'kkLOmega':
        f.write('   kt \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   ktFinal \n')
        f.write('   { \n')
        f.write('       $kt; \n')
        f.write('       relTol         0; \n')
        f.write('   } \n \n')
        f.write('   kl \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   klFinal \n')
        f.write('   { \n')
        f.write('       $kl; \n')
        f.write('       relTol         0; \n')
        f.write('   } \n \n')
        f.write('   omega \n')
        f.write('   { \n')
        f.write('       solver          smoothSolver;  \n')
        f.write('       smoother	    GaussSeidel; \n')
        f.write('       tolerance       ' + CFDSettings.Tolerance + '; \n')
        f.write('       relTol           ' + CFDSettings.relTol + '; \n')
        f.write('       nSweeps          ' + CFDSettings.nSweeps + '; \n')
        f.write('   } \n')
        f.write('   omegaFinal \n')
        f.write('   { \n')
        f.write('       $omega; \n')
        f.write('       relTol         0; \n')
        f.write('   } \n \n')
    f.write('} \n')
    f.write('\n')
    f.write('PIMPLE \n')
    f.write('{ \n')
    f.write('   nNonOrthogonalCorrectors ' + CFDSettings.nNonOrthogonalCorrectors + '; \n')
    f.write('   nOuterCorrectors ' + CFDSettings.nOuterCorrectors + '; \n')
    f.write('   nCorrectors ' + CFDSettings.nCorrectors + '; \n')
    f.write('   pRefCell        ' + CFDSettings.pRefCell + '; \n')
    f.write('   pRefValue       ' + CFDSettings.pRefValue + '; \n')
    f.write('   consistent      true; \n \n')
    f.write('\n\n')
    f.write('residualControl \n')
    f.write('{ \n')
    f.write('   p \n')
    f.write('   { \n')
    f.write('       tolerance          ' + CFDSettings.residualControlUnsteady + '; \n')
    f.write('       relTol        ' + CFDSettings.relTol + '; \n')
    f.write('   } \n')
    f.write('   U \n')
    f.write('   { \n')
    f.write('       tolerance          ' + CFDSettings.residualControlUnsteady + '; \n')
    f.write('       relTol        ' + CFDSettings.relTol + '; \n')
    f.write('   } \n')
    if CFDSettings.Solver == 'SpalartAllmaras':
        f.write('   nuTilda \n')
        f.write('{ \n')
        f.write('       tolerance          ' + CFDSettings.residualControlUnsteady + '; \n')
        f.write('       relTol        ' + CFDSettings.relTol + '; \n')
    elif CFDSettings.Solver == 'kOmegaSST' or CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('   "(k|omega)" \n')
        f.write('{ \n')
        f.write('       tolerance          ' + CFDSettings.residualControlUnsteady + '; \n')
        f.write('       relTol        ' + CFDSettings.relTol + '; \n')
    elif CFDSettings.Solver == 'kOmegaSSTLM':
        f.write('   "(k|omega|gammaInt|ReThetat)" \n')
        f.write('{ \n')
        f.write('       tolerance          ' + CFDSettings.residualControlUnsteady + '; \n')
        f.write('       relTol        ' + CFDSettings.relTol + '; \n')
    elif CFDSettings.Solver == 'kkLOmega':
        f.write('   "(kt|kl|omega)" \n')
        f.write('{ \n')
        f.write('       tolerance          ' + CFDSettings.residualControlUnsteady + '; \n')
        f.write('       relTol        ' + CFDSettings.relTol + '; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('} \n')
    f.write('\n')
    f.write('relaxationFactors \n')
    f.write('{ \n')
    f.write('   fields \n')
    f.write('   { \n')
    f.write('       p           ' + CFDSettings.relaxationFactorsP + '; \n')
    f.write('       pFinal       1; \n')
    f.write('   } \n')
    f.write('\n')
    f.write('   equations \n')
    f.write('   { \n')
    if CFDSettings.Solver == 'SpalartAllmaras':
        f.write('       "(U|nuTilda)"           ' + CFDSettings.relaxationFactors + '; \n')
        f.write('       "(U|nuTilda)Final"           1; \n')
    elif CFDSettings.Solver == 'kOmegaSST' or CFDSettings.Solver == 'kOmegaSSTLowRe':
        f.write('       "(U|k|omega)"           ' + CFDSettings.relaxationFactors + '; \n')
        f.write('       "(U|k|omega)Final"           1; \n')
    elif CFDSettings.Solver == 'kOmegaSSTLM':
        f.write('       "(U|k|omega|gammaInt|ReThetat)"           ' + CFDSettings.relaxationFactors + '; \n')
        f.write('       "(U|k|omega|gammaInt|ReThetat)Final"           1; \n')
    elif CFDSettings.Solver == 'kkLOmega':
        f.write('       "(U|kt|kl|omega)"           ' + CFDSettings.relaxationFactors + '; \n')
        f.write('       "(U|kt|kl|omega)Final"           1; \n')
    f.write('   } \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv fvSolution system')


def write_createPatch():
    f = open('createPatchDict', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   object      createPatchDict; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('pointSync false; \n')
    f.write(' \n')
    f.write('patches \n')
    f.write('( \n')
    f.write('   { \n')
    f.write('       name frontAndBack; \n')
    f.write('       patchInfo \n')
    f.write('       { \n')
    f.write('           type empty; \n')
    f.write('       } \n')
    f.write('       constructFrom patches; \n')
    f.write('       patches (defaultFaces); \n')
    f.write('       set f0; \n')
    f.write('   } \n')
    f.write('   { \n')
    f.write('       name airfoil; \n')
    f.write('       patchInfo \n')
    f.write('       { \n')
    f.write('           type wall; \n')
    f.write('       } \n')
    f.write('       constructFrom patches; \n')
    f.write('       patches (airfoils); \n')
    f.write('       set f0; \n')
    f.write('   } \n')
    f.write('); \n')
    f.write(' \n')
    f.write('// ************************************************************************* // \n')
    f.close()
    os.system('mv createPatchDict system')


def write_createPatch_construct2d():
    f = open('createPatchDict', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('FoamFile \n')
    f.write('{ \n')
    f.write('   version     2.0; \n')
    f.write('   format      ascii; \n')
    f.write('   class       dictionary; \n')
    f.write('   object      createPatchDict; \n')
    f.write('} \n')
    f.write('// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // \n')
    f.write(' \n')
    f.write('pointSync false; \n')
    f.write(' \n')
    f.write('patches \n')
    f.write('( \n')
    f.write('   { \n')
    f.write('       name airfoil; \n')
    f.write('       patchInfo \n')
    f.write('       { \n')
    f.write('           type wall; \n')
    f.write('       } \n')
    f.write('       constructFrom patches; \n')
    f.write('       patches (auto0); \n')
    f.write('   } \n')
    f.write('   { \n')
    f.write('       name frontAndBack; \n')
    f.write('       patchInfo \n')
    f.write('       { \n')
    f.write('           type empty; \n')
    f.write('       } \n')
    f.write('       constructFrom patches; \n')
    f.write('       patches (auto1 auto2); \n')
    f.write('   } \n')
    f.write('   { \n')
    f.write('       name farfield; \n')
    f.write('       patchInfo \n')
    f.write('       { \n')
    f.write('           type patch; \n')
    f.write('       } \n')
    f.write('       constructFrom patches; \n')
    f.write('       patches (auto3); \n')
    f.write('   } \n')
    f.write('); \n')
    f.write(' \n')
    f.write('// ************************************************************************* // \n')
    f.close()
    os.system('mv createPatchDict system')


def write_fieldAverage(CFDSettings):
    f = open('fieldAverage', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('fieldAverage \n')
    f.write('{ \n')
    f.write('   type               fieldAverage; \n')
    f.write('   libs               ("libfieldFunctionObjects.so"); \n')
    f.write('   enabled            true; \n')
    f.write('   writeControl       runTime; \n')
    f.write('   writeInterval      ' + CFDSettings.UnsteadyWriteInterval + '; \n \n')
    f.write('   fields \n')
    f.write('   ( \n')
    f.write('   U \n')
    f.write('   { \n')
    f.write('      mean        on; \n')
    f.write('      prime2Mean  on; \n')
    f.write('      base	       time; \n')
    f.write('   } \n \n')
    f.write('   p \n')
    f.write('   { \n')
    f.write('      mean        on; \n')
    f.write('      prime2Mean  on; \n')
    f.write('      base	       time; \n')
    f.write('   } \n')
    f.write('   ); \n')
    f.write('} \n \n')
    f.write('// ************************************************************************* // \n')
    f.close()
    os.system('mv fieldAverage system')


def write_forceCoeffs(conditions):
    f = open('forceCoeffs', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('forceCoeffs \n')
    f.write('{ \n')
    f.write('   type               forceCoeffs; \n')
    f.write('   libs               ( "libforces.so" ); \n')
    f.write('   writeControl       timeStep; \n')
    f.write('   writeInterval      1; \n')
    f.write(' \n')
    f.write('patches             ( "airfoil.*" ); \n')
    f.write('   p	                p; \n')
    f.write('   U	                U; \n')
    f.write('   rho	                rhoInf; \n')
    f.write('   log                 false; \n')
    f.write(' \n')
    f.write('   liftDir             (' + str(-1*np.sin(np.deg2rad(conditions.aoa))) + ' ' + str(np.cos(np.deg2rad(conditions.aoa))) + ' 0.0000); \n')
    f.write('   dragDir             (' + str(np.cos(np.deg2rad(conditions.aoa))) + ' ' + str(np.sin(np.deg2rad(conditions.aoa))) + ' 0.0000); \n')
    f.write('   CofR                (0.25 0 0); \n')
    f.write('   pitchAxis           (0 0 1); \n')
    f.write(' \n')
    f.write('   magUInf             ' + str(conditions.vel) + '; \n')
    f.write('   rhoInf              ' + str(conditions.rho) + '; \n')
    f.write('   lRef              ' + str(conditions.chord) + '; \n')
    f.write('   Aref              ' + str(conditions.chord) + '; \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv forceCoeffs system')


def write_unsteady_forceCoeffs(conditions, CFDSettings):
    f = open('forceCoeffs', 'w')
    f.write('/*--------------------------------*- C++ -*----------------------------------*\ \n')
    f.write('| =========                 |                                                 |  \n')
    f.write('| \\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |  \n')
    f.write('|  \\\    /   O peration     | Version:  4.0                                   | \n')
    f.write('|   \\\  /    A nd           | Web:      www.OpenFOAM.org                      | \n')
    f.write('|    \\\/     M anipulation  |                                                 |  \n')
    f.write('\*---------------------------------------------------------------------------*/ \n')
    f.write('forceCoeffs \n')
    f.write('{ \n')
    f.write('   type               forceCoeffs; \n')
    f.write('   libs               ( "libforces.so" ); \n')
    f.write('   writeControl       runTime; \n')
    f.write('   writeInterval      ' + CFDSettings.ForceWriteIntervalUnsteady + '; \n')
    f.write(' \n')
    f.write('patches             ( "airfoil.*" ); \n')
    f.write('   p	                p; \n')
    f.write('   U	                U; \n')
    f.write('   rho	                rhoInf; \n')
    f.write('   log                 true; \n')
    f.write(' \n')
    f.write('   liftDir             (' + str(-1 * np.sin(np.deg2rad(conditions.aoa))) + ' ' + str(
        np.cos(np.deg2rad(conditions.aoa))) + ' 0.0000); \n')
    f.write('   dragDir             (' + str(np.cos(np.deg2rad(conditions.aoa))) + ' ' + str(
        np.sin(np.deg2rad(conditions.aoa))) + ' 0.0000); \n')
    f.write('   CofR                (-0.25 0 0); \n')
    f.write('   pitchAxis           (0 0 1); \n')
    f.write(' \n')
    f.write('   magUInf             ' + str(conditions.vel) + '; \n')
    f.write('   rhoInf              ' + str(conditions.rho) + '; \n')
    f.write('   lRef              1; \n')
    f.write('   Aref              1; \n')
    f.write('} \n')
    f.write('\n')
    f.write('// ************************************************************************* //')
    f.close()
    os.system('mv forceCoeffs system')